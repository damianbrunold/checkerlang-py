bind_native("is_empty");
bind_native("is_not_empty");
bind_native("is_not_null");
bind_native("is_null");

"
is_zero(obj)

Returns TRUE if the obj is zero.

: is_zero(0) ==> TRUE
"
def is_zero(obj) is_numeric(obj) and obj == 0;


"
is_negative(obj)

Returns TRUE if the obj is negative.

: is_negative(-1) ==> TRUE
"
def is_negative(obj) is_numeric(obj) and obj < 0;


"
is_positive(obj)

Returns TRUE if the obj is positive.

: is_positive(1) ==> TRUE
"
def is_positive(obj) is_numeric(obj) and obj > 0;


"
is_alphanumerical(str, min = 1, max = 99999)

Returns TRUE if the string is alphanumerical, i.e. contains only a-z, A-Z and 0-9.
It is possible to specify minimal and maximal length using the min and max optional
parameters.

: is_alphanumerical('Ab12') ==> TRUE
"
def is_alphanumerical(str, min=1, max=99999) do
    require String import [matches];
    is_string(str) and matches(str, pattern('^[a-zA-Z0-9]{' + min + ',' + max + '}$'));
end;


"
is_numerical(str, min=1, max=99999)

Returns TRUE if the string is numerical, i.e. contains only 0-9. It is possible to
specify minimal and maximal length using the min and max optional parameters.

: is_numerical('123') ==> TRUE
: is_numerical('12b') ==> FALSE
: is_numerical('') ==> FALSE
"
def is_numerical(str, min=1, max=99999) do
    require String import [matches];
    is_string(str) and matches(str, pattern('^[0-9]{' + min + ',' + max + '}$'));
end;
