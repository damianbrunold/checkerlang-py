bind_native("add");
bind_native("append");
bind_native("body");
bind_native("boolean");
bind_native("ceiling");
bind_native("compare");
bind_native("date");
bind_native("decimal");
bind_native("delete_at");
bind_native("div");
bind_native("equals");
bind_native("escape_pattern");
bind_native("eval");
bind_native("floor");
bind_native("greater");
bind_native("greater_equals");
bind_native("identity");
bind_native("if_empty");
bind_native("if_null");
bind_native("if_null_or_empty");
bind_native("info");
bind_native("insert_at");
bind_native("int");
bind_native("length");
bind_native("less");
bind_native("less_equals");
bind_native("list");
bind_native("ls");
bind_native("map");
bind_native("mod");
bind_native("mul");
bind_native("not_equals");
bind_native("object");
bind_native("parse");
bind_native("parse_json");
bind_native("pattern");
bind_native("put");
bind_native("range");
bind_native("remove");
bind_native("round");
bind_native("set");
bind_native("sorted");
bind_native("string");
bind_native("sub");
bind_native("sublist");
bind_native("sum");
bind_native("timestamp");
bind_native("type");
bind_native("zip");
bind_native("zip_map");


require Type import [
    is_string,
    is_list,
    is_set,
    is_map,
    is_object,
    is_numeric
];

require Predicate import [
    is_empty,
    is_zero,
    is_negative,
    is_numerical,
    is_alphanumerical,
    is_empty,
    is_not_empty,
    is_null,
    is_not_null
];

require Date import [
    is_valid_date,
    is_valid_time
];

require IO import [
    println,
    print
];

require String import [
    starts_with,
    ends_with,
    contains,
    find,
    find_last,
    substr,
    matches,
    trim,
    split,
    split2,
    replace,
    join,
    q,
    esc,
    s,
    reverse as reverse_string
];

require Math import [
    abs,
    sign
];


"
new(obj, args...)

Creates a new instance of an object. This makes a copy of
the original object and afterwards calls the constructor
_init_, if it exists.

: def o = <* a = 2, f = fn(self, x) self->a * x, _init_ = fn(self, a) self->a = a *>; def n = new(o, 3); [o->f(2), n->f(2)] ==> [4, 6]
: def o = <* _init_(self, n) self->_data = interval(1, n), get(self) sum(self->_data) *>; def a = new(o, 100); a->get() ==> 5050
"
def new(obj, args...) do
  if type(obj) != "object" then error "Expected object but got " + type(obj);
  def result = object();
  def members = set(obj);
  for member in members do
    result[member] = obj[member];
  end;
  if "_init_" in members then do
    result->_init_(...args...);
  end;
  result;
end;


"
non_zero(a, b)

Returns the value a, if a is a non-zero integer, otherwise returns b.

: non_zero(1, 2) ==> 1
: non_zero(0, 2) ==> 2
"
def non_zero(a, b) do
  if int(a) == 0 then b
  else a
end;


"
non_empty(a, b)

Returns the value a, if a is a non-empty string, otherwise returns b.

: non_empty('a', 'b') ==> 'a'
: non_empty('', 'b') ==> 'b'
"
def non_empty(a, b) do
  if a == '' then b
  else a
end;


"
const(val)

Returns a function that returns a constant value, regardless of the argument used.

: def f = const(2); f(1) ==> 2
: def f = const(2); f('x') ==> 2
"
def const(val) fn(a) val;


"
min(a, b, key = identity)
min(a, key = identity)

Returns the minimum of the values a, b.

Returns the mininmum value of the list a.

The optional key parameter takes a function with one parameter, which
is used to get the value from a and b that is used for the comparison.
Default key is the identity function.

: min(1, 2) ==> 1
: min([1, 'z'], [2, 'a'], key = fn(x) x[1]) ==> [2, 'a']
: min([1, 3, 2, 4, 2]) ==> 1
"
def min(a, b = NULL, key = identity) do
  if is_list(a) and is_null(b) then do
    def min_item = a[0];
    def min_val = key(min_item);
    for item in a do
      def val = key(item);
      if val < min_val then do
        min_val = val;
        min_item = item;
      end;
    end;
    return min_item;
  end;
  if key(a) < key(b) then a
  else b;
end;


"
max(a, b, key = identity)
max(a, key = identity)

Returns the maximum of the values a, b.

Returns the maximum value of the list a.

The optional key parameter takes a function with one parameter, which
is used to get the value from a and b that is used for the comparison.
Default key is the identity function.

: max(1, 2) ==> 2
: max([1, 'z'], [2, 'a'], key = fn(x) x[1]) ==> [1, 'z']
: max([1, 3, 2, 4, 2]) ==> 4
"
def max(a, b = NULL, key = identity) do
  if is_list(a) and is_null(b)then do
    def max_item = a[0];
    def max_val = key(max_item);
    for item in a do
      def val = key(item);
      if val > max_val then do
        max_val = val;
        max_item = item;
      end;
    end;
    return max_item;
  end;
  if key(a) > key(b) then a
  else b;
end;


"
substitute(obj, idx, value)

If obj is a list or string, returns a list or string with the element
at index idx replaced by value.

The original string or list remain untouched.

: substitute('abcd', 2, 'x') ==> 'abxd'
: substitute([1, 2, 3, 4], 2, 'x') ==> [1, 2, 'x', 4]
"
def substitute(obj, idx, value) do
  if is_string(obj) then substr(obj, 0, idx) + value + substr(obj, idx + 1)
  if is_list(obj) then sublist(obj, 0, idx) + value + sublist(obj, idx + 1)
  else error('Cannot substitute in ' + type(obj))
end;


"
interval(a)
interval(a, b)

Returns the interval of integers between a and b, inclusive.
If only a is provided, the interval is taken to be [1, ... a]

: interval(1, 10) ==> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
: interval(1, 1) ==> [1]
: interval(10) ==> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
"
def interval(a, b = NULL) do
    if is_null(a) then return NULL
    if is_null(b) then range(1, a + 1)
    else range(a, b + 1)
end;


"
label_data(labels, data)

Creates a map that labels the data with the
given labels.

Labels and data must be two lists of equal
length. Labels must be unique.

: label_data(['a', 'b', 'c'], [1, 2, 3]) ==> <<<'a' => 1, 'b' => 2, 'c' => 3>>>
"
def label_data(labels, data) do
    zip_map(labels, data);
end;


"
any(lst, predicate)
any(lst)

Returns TRUE, if the predicate function returns
TRUE for any element of the list.

If no predicate function is passed, the list must
contain boolean values.

: any([1, 2, 3], fn(n) n == 3) ==> TRUE
: any([1, 2, 3], fn(n) n == 4) ==> FALSE
: any([TRUE, TRUE, TRUE]) ==> TRUE
: any([TRUE, FALSE, TRUE]) ==> TRUE
: any([e >= 2 for e in [2, 3, 4]]) ==> TRUE
: any([e >= 2 for e in [1, 3, 4]]) ==> TRUE
"
def any(lst, pred = fn(x) x) do
    for element in lst do
        if pred(element) then return TRUE;
    end;
    return FALSE;
end;


"
all(lst, predicate)
all(lst)

Returns TRUE, if the predicate function returns
TRUE for all elements of the list.

If no predicate function is passed, the list must
contain boolean values.

: all([1, 2, 3], fn(n) n <= 3) ==> TRUE
: all([1, 2, 3], fn(n) n <  3) ==> FALSE
: all([TRUE, TRUE, TRUE]) ==> TRUE
: all([TRUE, FALSE, TRUE]) ==> FALSE
: all([e >= 2 for e in [2, 3, 4]]) ==> TRUE
: all([e >= 2 for e in [1, 3, 4]]) ==> FALSE
"
def all(lst, pred = fn(x) x) do
    for element in lst do
        if not pred(element) then return FALSE;
    end;
    return TRUE;
end;


"
pairs(lst)

Returns a list where each entry consists of a pair
of elements of lst.

: pairs([1, 2, 3]) ==> [[1, 2], [2, 3]]
: pairs([1, 2, 3, 4]) ==> [[1, 2], [2, 3], [3, 4]]
"
def pairs(lst) do
    def result = [];
    for index in range(length(lst)-1) do
        append(result, [lst[index], lst[index + 1]]);
    end;
    return result;
end;


"
now()

Returns the current date.
"
def now() date();


"
div0(a, b, div_0_value = MAXINT)

If b is not zero, the result of a / b is returned.
If b is zero, the value div_0_value is returned.

: div0(12, 3) ==> 4
: div0(12, 5) ==> 2
: div0(12.0, 5) ==> 2.4
: div0(12.5, 2) ==> 6.25
: div0(12, 0) ==> MAXINT
: div0(12, 0, 0) ==> 0
: div0(12, 0.0, 0) ==> 0
"
def div0(a, b, div_0_value = MAXINT) do
    if b == 0 then div_0_value
    else div(a, b);
end;


"
map_get(m, k, default_value=NULL)

If the map m contains the key k, then the corresponding
value is returned. Otherwise, the default_value is
returned.

: map_get(<<<a => 1, b => 2>>>, 'a') ==> 1
: map_get(<<<a => 1, b => 2>>>, 'b') ==> 2
: map_get(<<<a => 1, b => 2>>>, 'c') ==> NULL
: map_get(<<<a => 1, b => 2>>>, 'c', default_value = 9) ==> 9
"
def map_get(m, k, default_value=NULL) do
    if k in m then m[k] else default_value;
end;


"
map_get_pattern(m, k, default_value=NULL)

The map m is assumed to contain regex patterns as keys.
If the key k matches one of the regex patterns, then
the corresponding value is returned. Otherwise, the
default_value is returned.

If more than one pattern matches the key k, then it is
undefined, which pattern is selected for retrieving its
value.

: map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'a') ==> 1
: map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'b') ==> 1
: map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'c') ==> 2
: map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'd') ==> 2
: map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'e') ==> NULL
"
def map_get_pattern(m, k, default_value=NULL) do
    for pattern in set(m) if str_matches(k, pattern) then return m[pattern];
    return default_value;
end;


"
curry(f, arg)

Partially applies the function f with the argument arg.
This returns another function which takes the remaining
args of the original function f.

: def f(a, b, c) [a, b, c]; def g = curry(f, 1); g(2, 3) ==> [1, 2, 3]
"
def curry(f, arg) fn(args...) f(arg, ...args...);


"
apply(f, args)

Applies the function with the arguments in the list args.

: apply(fn(a, b, c) a + b + c, [1, 2, 3]) ==> 6
"
def apply(f, args) f(...args);


"
lines(str)

Splits the string str into lines and returns them as a list.

: lines('a\\\\nb c\\\\r\\\\nd') ==> ['a', 'b c', 'd']
"
def lines(str) do
  split(str, '\\r?\\n');
end;


"
words(str)

Splits the string str into words and returns them as a list.

: words('one  two\\tthree four') ==> ['one', 'two', 'three', 'four']
"
def words(str) do
  split(str, '[ \t\r\n]+');
end;


"
unlines(lst)

Joins a list of lines into one string.

: unlines(['a', 'b', 'c']) ==> 'a\\nb\\nc'
"
def unlines(lst) do
  lst !> join(sep = '\n');
end;


"
unwords(lst)

Joins a list of words into one string.

: unwords(['a', 'b', 'c']) ==> 'a b c'
"
def unwords(lst) do
  lst !> join(sep = ' ');
end;


"
enumerate(obj)

Enumerates the contents of a list, set or map.

The result for a list is a list of pairs (index, value).

The result for a map is a list of pairs (key, value).

A set cannot be enumerated, since it does not have a
well defined ordering of its elements. If you wish to
enumerate a set, then convert it into a list and sort it
first, e.g. enumerate(sorted(list(some_set))). But be aware
that this involves a costly sort operation, maybe you
should think about using a list instead of the set in
the first place.

For other data types, an error is thrown.

Typically, you would use this in a for loop, e.g.
  for entry in enumerate(some_list) do
    println('index = ' + entry[0] + ', value = ' + entry[1]);
  end;

: enumerate(['a', 'b', 'c']) ==> [[0, 'a'], [1, 'b'], [2, 'c']]
: enumerate(<<<a => 5, b => 6, c => 7>>>) ==> [['a', 5], ['b', 6], ['c', 7]]
"
def enumerate(obj) do
    if is_list(obj) then [[i, obj[i]] for i in range(length(obj))]
    elif is_map(obj) then [[key, obj[key]] for key in set(obj)]
    elif is_object(obj) then [[member, obj[member]] for member in obj]
    else error("can only enumerate list, set and map objects")
end;


"
sprintf(fmt, args...)

Formats a string format using the provided args. Each
value can be referred to in the fmt string using the
{0} syntax, where 0 means the first argument passed.

This uses internally the s function. See there for
an explanation of available formatting suffixes.

: sprintf('{0} {1}', 1, 2) ==> '1 2'
: sprintf('{0} {1}', 'a', 'b') ==> 'a b'
: sprintf('{0#5} {1#5}', 1, 2) ==> '    1     2'
: sprintf('{0#-5} {1#-5}', 1, 2) ==> '1     2    '
: sprintf('{0#05} {1#05}', 1, 2) ==> '00001 00002'
: require Math; sprintf('{0#.4}', Math->PI) ==> '3.1416'
"
def sprintf(fmt, args...) do
    for entry in enumerate(args...) do
        if is_string(entry[1]) then entry[1] = "'" + entry[1] + "'";
        fmt = fmt !> replace('{' + entry[0] + '}', '{x' + entry[1] + '}') !> replace('{' + entry[0] + '#', '{x' + entry[1] + '#');
    end;
    return s(fmt !> replace('{x', '{'));
end;


"
count(obj, elem)

Returns the number of times, elem is contained in obj.
Obj can be a string, list or map. If it is a map,
then the values of the map, not the keys are checked.

: count([1, 2, 2, 2, 3, 4], 2) ==> 3
: count(<<<1 => 1, 1 => 2, 2 => 2, 3 => 3>>>, 2) ==> 2
: count('122234', '2') ==> 3
"
def count(obj, elem) do
    def result = 0;
    for e in obj do
        if e == elem then result += 1;
    end;
    return result;
end;


"
chunks(obj, chunk_size)

Splits the obj into a list where each item is of size chunk_size,
except perhaps the last, which may be smaller. Obj can be a string
or a list.

: range(9) !> chunks(3) ==> [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
: range(10) !> chunks(3) ==> [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]
: 'abcdefghi' !> chunks(3) ==> ['abc', 'def', 'ghi']
"
def chunks(obj, chunk_size) do
    def result = [];
    if (is_list(obj)) then do
      while length(obj) > chunk_size do
        result !> append(obj !> sublist(0, chunk_size));
        obj = obj !> sublist(chunk_size);
      end;
      result !> append(obj);
    end if is_string(obj) then do
      while length(obj) > chunk_size do
          result !> append(obj !> substr(0, chunk_size));
          obj = obj !> substr(chunk_size);
      end;
      result !> append(obj);
    end else error("cannot split obj of type " + type(obj));
    return result;
end;


"
new(cls, args...)

Creates an instance of the class cls.
"
def new(cls, args...) do
    def instance = <*_proto_=cls*>;
    if "_init_" in cls then instance->_init_(...args...);
    return instance;
end;

