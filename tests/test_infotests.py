# generated by tests/update_tests.py script, do not modify
from ckl.functions import get_none_environment
from ckl.interpreter import Interpreter
from ckl.values import ValueString

interpreter = Interpreter(False, True)

def run_test(test, expected):
    env = get_none_environment()
    result = interpreter.interpret(test, '{test}', environment=env)
    if not expected.startswith('<'):
        expected = interpreter.interpret(expected, '{info-test-expected}')
    else:
        expected = ValueString(expected)
    if expected.isString() and expected.value.startswith("'"):
        expected = ValueString(expected[1:-1])
    if expected.isString() and not result.isString():
        result = result.asString();
    assert(result == expected)


def test_abs_1():
    run_test('abs(2)', '2')

def test_abs_2():
    run_test('abs(-3)', '3')

def test_acos_1():
    run_test('acos(1)', '0.0')

def test_add_1():
    run_test('add(1, 2)', '3')

def test_add_2():
    run_test("add(date('20100201'), 3)", "'20100204000000'")

def test_all_1():
    run_test('all([1, 2, 3], fn(n) n <= 3)', 'TRUE')

def test_all_2():
    run_test('all([1, 2, 3], fn(n) n <  3)', 'FALSE')

def test_all_3():
    run_test('all([TRUE, TRUE, TRUE])', 'TRUE')

def test_all_4():
    run_test('all([TRUE, FALSE, TRUE])', 'FALSE')

def test_all_5():
    run_test('all([e >= 2 for e in [2, 3, 4]])', 'TRUE')

def test_all_6():
    run_test('all([e >= 2 for e in [1, 3, 4]])', 'FALSE')

def test_any_1():
    run_test('any([1, 2, 3], fn(n) n == 3)', 'TRUE')

def test_any_2():
    run_test('any([1, 2, 3], fn(n) n == 4)', 'FALSE')

def test_any_3():
    run_test('any([TRUE, TRUE, TRUE])', 'TRUE')

def test_any_4():
    run_test('any([TRUE, FALSE, TRUE])', 'TRUE')

def test_any_5():
    run_test('any([e >= 2 for e in [2, 3, 4]])', 'TRUE')

def test_any_6():
    run_test('any([e >= 2 for e in [1, 3, 4]])', 'TRUE')

def test_append_1():
    run_test('append([1, 2], 3)', '[1, 2, 3]')

def test_append_2():
    run_test('append(<<1, 2>>, 3)', '<<1, 2, 3>>')

def test_append_all_1():
    run_test('def a = [1, 2, 3]; append_all(a, [4, 5, 6]); a', '[1, 2, 3, 4, 5, 6]')

def test_append_all_2():
    run_test('def a = <<1, 2, 3>>; append_all(a, [2, 3, 4]); a', '<<1, 2, 3, 4>>')

def test_append_all_3():
    run_test('def a = [1, 2, 3]; append_all(a, <<4, 5, 6>>); a', '[1, 2, 3, 4, 5, 6]')

def test_append_all_4():
    run_test('def a = [1, 2, 3]; append_all(a, [2, 3, 4]); a', '[1, 2, 3, 2, 3, 4]')

def test_apply_1():
    run_test('apply(fn(a, b, c) a + b + c, [1, 2, 3])', '6')

def test_asin_1():
    run_test('asin(0)', '0.0')

def test_atan_1():
    run_test('atan(0)', '0.0')

def test_atan2_1():
    run_test('atan2(0, 1)', '0.0')

def test_basename_1():
    run_test("basename('dir/file.ext')", "'file.ext'")

def test_basename_2():
    run_test("basename('file.ext')", "'file.ext'")

def test_basename_3():
    run_test("basename('a/b/c\\\\d\\\\e\\\\file.ext')", "'file.ext'")

def test_bit_and_1():
    run_test('bit_and(5, 6)', '4')

def test_bit_and_2():
    run_test('bit_and(4, 4)', '4')

def test_bit_and_32_1():
    run_test('bit_and(5, 6)', '4')

def test_bit_and_32_2():
    run_test('bit_and(4, 4)', '4')

def test_bit_not_1():
    run_test('bit_not(1)', '4294967294')

def test_bit_not_2():
    run_test('bit_not(0)', '4294967295')

def test_bit_not_32_1():
    run_test('bit_not(1)', '4294967294')

def test_bit_not_32_2():
    run_test('bit_not(0)', '4294967295')

def test_bit_or_1():
    run_test('bit_or(1, 2)', '3')

def test_bit_or_2():
    run_test('bit_or(3, 4)', '7')

def test_bit_or_3():
    run_test('bit_or(4, 4)', '4')

def test_bit_or_32_1():
    run_test('bit_or(1, 2)', '3')

def test_bit_or_32_2():
    run_test('bit_or(3, 4)', '7')

def test_bit_or_32_3():
    run_test('bit_or(4, 4)', '4')

def test_bit_rotate_left_1():
    run_test('bit_rotate_left(1, 2)', '4')

def test_bit_rotate_left_2():
    run_test('bit_rotate_left(1, 3)', '8')

def test_bit_rotate_left_3():
    run_test('bit_rotate_left(4, 4)', '64')

def test_bit_rotate_left_32_1():
    run_test('bit_rotate_left(1, 2)', '4')

def test_bit_rotate_left_32_2():
    run_test('bit_rotate_left(1, 3)', '8')

def test_bit_rotate_left_32_3():
    run_test('bit_rotate_left(4, 4)', '64')

def test_bit_rotate_right_1():
    run_test('bit_rotate_right(1, 2)', '1073741824')

def test_bit_rotate_right_2():
    run_test('bit_rotate_right(1, 3)', '536870912')

def test_bit_rotate_right_3():
    run_test('bit_rotate_right(4, 4)', '1073741824')

def test_bit_rotate_right_32_1():
    run_test('bit_rotate_right(1, 2)', '1073741824')

def test_bit_rotate_right_32_2():
    run_test('bit_rotate_right(1, 3)', '536870912')

def test_bit_rotate_right_32_3():
    run_test('bit_rotate_right(4, 4)', '1073741824')

def test_bit_shift_left_1():
    run_test('bit_shift_left(1, 2)', '4')

def test_bit_shift_left_2():
    run_test('bit_shift_left(1, 3)', '8')

def test_bit_shift_left_3():
    run_test('bit_shift_left(1, 4)', '16')

def test_bit_shift_right_1():
    run_test('bit_shift_right(4, 1)', '2')

def test_bit_shift_right_2():
    run_test('bit_shift_right(4, 3)', '0')

def test_bit_shift_right_3():
    run_test('bit_shift_right(4, 2)', '1')

def test_bit_xor_1():
    run_test('bit_xor(1, 2)', '3')

def test_bit_xor_2():
    run_test('bit_xor(1, 3)', '2')

def test_bit_xor_3():
    run_test('bit_xor(4, 4)', '0')

def test_bit_xor_32_1():
    run_test('bit_xor(1, 2)', '3')

def test_bit_xor_32_2():
    run_test('bit_xor(1, 3)', '2')

def test_bit_xor_32_3():
    run_test('bit_xor(4, 4)', '0')

def test_body_1():
    run_test('body(fn(x) 2 * x)', "'(mul 2, x)'")

def test_boolean_1():
    run_test('boolean(1)', 'TRUE')

def test_ceiling_1():
    run_test('ceiling(1.3)', '2.0')

def test_choice_1():
    run_test('choice([1, 1, 1, 1])', '1')

def test_chr_1():
    run_test('chr(97)', "'a'")

def test_chr_2():
    run_test('chr(32)', "' '")

def test_chunks_1():
    run_test('range(9) !> chunks(3)', '[[0, 1, 2], [3, 4, 5], [6, 7, 8]]')

def test_chunks_2():
    run_test('range(10) !> chunks(3)', '[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9]]')

def test_chunks_3():
    run_test("'abcdefghi' !> chunks(3)", "['abc', 'def', 'ghi']")

def test_compare_1():
    run_test('compare(1, 2) < 0', 'TRUE')

def test_compare_2():
    run_test('compare(3, 1) > 0', 'TRUE')

def test_compare_3():
    run_test('compare(1, 1) == 0', 'TRUE')

def test_compare_4():
    run_test("compare('1', 2) < 0", 'TRUE')

def test_compare_5():
    run_test("compare('2', 1) < 0", 'TRUE')

def test_compare_6():
    run_test("compare(100, '100') > 0", 'TRUE')

def test_compare_7():
    run_test('compare(NULL, 1) > 0', 'TRUE')

def test_compare_8():
    run_test('compare(NULL, NULL) == 0', 'TRUE')

def test_const_1():
    run_test('def f = const(2); f(1)', '2')

def test_const_2():
    run_test("def f = const(2); f('x')", '2')

def test_contains_1():
    run_test("contains('abcdef', 'abc')", 'TRUE')

def test_contains_2():
    run_test("contains('abcdef', 'cde')", 'TRUE')

def test_contains_3():
    run_test("contains('abcdef', 'def')", 'TRUE')

def test_contains_4():
    run_test("contains('abcdef', 'efg')", 'FALSE')

def test_contains_5():
    run_test("contains(NULL, 'abc')", 'FALSE')

def test_contains_6():
    run_test('contains([1, 2, 3], 2)', 'TRUE')

def test_contains_7():
    run_test('<<1, 2, 3>> !> contains(3)', 'TRUE')

def test_contains_8():
    run_test("<<<a => 1, b => 2>>> !> contains('b')", 'TRUE')

def test_cos_1():
    run_test('cos(PI)', '-1.0')

def test_count_1():
    run_test('count([1, 2, 2, 2, 3, 4], 2)', '3')

def test_count_2():
    run_test('count(<<<1 => 1, 1 => 2, 2 => 2, 3 => 3>>>, 2)', '2')

def test_count_3():
    run_test("count('122234', '2')", '3')

def test_curry_1():
    run_test('def f(a, b, c) [a, b, c]; def g = curry(f, 1); g(2, 3)', '[1, 2, 3]')

def test_date_1():
    run_test("string(date('20170102'))", "'20170102000000'")

def test_date_2():
    run_test("string(date('2017010212'))", "'20170102120000'")

def test_date_3():
    run_test("string(date('20170102123456'))", "'20170102123456'")

def test_date_day_1():
    run_test("date_day('20190102')", '02')

def test_date_hour_1():
    run_test("date_hour('2019010212')", '12')

def test_date_minute_1():
    run_test("date_minute(parse_date('201901021223', fmt='yyyyMMddHHmm'))", '23')

def test_date_month_1():
    run_test("date_month('20190102')", '01')

def test_date_second_1():
    run_test("date_second(parse_date('20190102122345', fmt='yyyyMMddHHmmss'))", '45')

def test_date_year_1():
    run_test("date_year('20190102')", '2019')

def test_decimal_1():
    run_test("decimal('1.2')", '1.2')

def test_delete_at_1():
    run_test("delete_at(['a', 'b', 'c', 'd'], 2)", "'c'")

def test_delete_at_2():
    run_test("delete_at(['a', 'b', 'c', 'd'], -3)", "'b'")

def test_delete_at_3():
    run_test("def lst=['a','b','c','d']; delete_at(lst, 2); lst", "['a', 'b', 'd']")

def test_delete_at_4():
    run_test("delete_at(['a', 'b', 'c', 'd'], 4)", 'NULL')

def test_diff_1():
    run_test('diff(<<1, 2, 3, 4>>, <<3, 4>>)', '<<1, 2>>')

def test_diff_2():
    run_test('diff([1, 2, 3, 4], [3, 4])', '<<1, 2>>')

def test_diff_3():
    run_test('diff(<<1, 2, 3, 4>>, <<>>)', '<<1, 2, 3, 4>>')

def test_diff_4():
    run_test('diff(<<1, 2, 3, 4>>, <<1, 2, 3, 4>>)', '<<>>')

def test_dirname_1():
    run_test("dirname('dir/file.ext')", "'dir'")

def test_dirname_2():
    run_test("dirname('file.ext')", "''")

def test_dirname_3():
    run_test("dirname('a/b/c\\\\d\\\\e\\\\file.ext')", "'a/b/c\\\\d\\\\e'")

def test_div_1():
    run_test('div(6, 2)', '3')

def test_div0_1():
    run_test('div0(12, 3)', '4')

def test_div0_2():
    run_test('div0(12, 5)', '2')

def test_div0_3():
    run_test('div0(12.0, 5)', '2.4')

def test_div0_4():
    run_test('div0(12.5, 2)', '6.25')

def test_div0_5():
    run_test('div0(12, 0)', 'MAXINT')

def test_div0_6():
    run_test('div0(12, 0, 0)', '0')

def test_div0_7():
    run_test('div0(12, 0.0, 0)', '0')

def test_ends_with_1():
    run_test("ends_with('abcdef', 'def')", 'TRUE')

def test_ends_with_2():
    run_test("ends_with('abcdef', 'abc')", 'FALSE')

def test_ends_with_3():
    run_test("ends_with(NULL, 'abc')", 'FALSE')

def test_enumerate_1():
    run_test("enumerate(['a', 'b', 'c'])", "[[0, 'a'], [1, 'b'], [2, 'c']]")

def test_enumerate_2():
    run_test('enumerate(<<<a => 5, b => 6, c => 7>>>)', "[['a', 5], ['b', 6], ['c', 7]]")

def test_equals_1():
    run_test('equals(1, 2)', 'FALSE')

def test_equals_2():
    run_test('equals(1, 1)', 'TRUE')

def test_equals_3():
    run_test('equals(1, 1.0)', 'TRUE')

def test_equals_4():
    run_test("equals('a', 'b')", 'FALSE')

def test_esc_1():
    run_test("esc('a<b')", "'a&lt;b'")

def test_esc_2():
    run_test("esc('<code>')", "'&lt;code&gt;'")

def test_escape_pattern_1():
    run_test("escape_pattern('|')", "'\\\\|'")

def test_escape_pattern_2():
    run_test("escape_pattern('|.|')", "'\\\\|\\\\.\\\\|'")

def test_eval_1():
    run_test("eval('1+1')", '2')

def test_exp_1():
    run_test('exp(0)', '1')

def test_file_extension_1():
    run_test("file_extension('dir/file.ext')", "'.ext'")

def test_file_extension_2():
    run_test("file_extension('dir/file.a.b.c')", "'.c'")

def test_file_extension_3():
    run_test("file_extension('dir/file')", "''")

def test_file_extension_4():
    run_test("file_extension('dir/.file')", "''")

def test_file_extension_5():
    run_test("file_extension('dir/.file.cfg')", "'.cfg'")

def test_filter_1():
    run_test('[1, 2, 3, 4, 5, 6] !> filter(fn(x) x % 2 == 0)', '[2, 4, 6]')

def test_filter_2():
    run_test("[1, 'one', 2.2, TRUE, sum] !> filter(is_numeric)", '[1, 2.2]')

def test_filter_3():
    run_test("[['abc', 1], ['bbc', 2], ['acc', 3]] !> filter(fn(x) x !> starts_with('a'), key = fn(x) x[0])", "[['abc', 1], ['acc', 3]]")

def test_find_1():
    run_test("find('abcdefg', 'cde')", '2')

def test_find_2():
    run_test("find('abc|def|ghi', '|', start = 4)", '7')

def test_find_3():
    run_test("find('abcxyabc', 'abc', start = 5)", '5')

def test_find_4():
    run_test('find([1, 2, 3, 4], 3)', '2')

def test_find_5():
    run_test("find(['abc', 'def'], 'e', key = fn(x) x[1])", '1')

def test_find_last_1():
    run_test("find_last('abcdefgcdexy', 'cde')", '7')

def test_find_last_2():
    run_test("find_last('abc|def|ghi|jkl', '|', start = 10)", '7')

def test_find_last_3():
    run_test("find_last('abcxyabc', 'abc', start = 4)", '0')

def test_find_last_4():
    run_test('find_last([1, 2, 3, 4, 3], 3)', '4')

def test_find_last_5():
    run_test("find_last(['abc', 'def'], 'e', key = fn(x) x[1])", '1')

def test_first_1():
    run_test('first([1, 2, 3])', '1')

def test_first_2():
    run_test('first(NULL)', 'NULL')

def test_first_n_1():
    run_test('range(100) !> first_n(5)', '[0, 1, 2, 3, 4]')

def test_flatten_1():
    run_test('flatten([[1, 2], 3, 4, [5, 6]])', '[1, 2, 3, 4, 5, 6]')

def test_flatten_2():
    run_test('flatten([1, 2, 3])', '[1, 2, 3]')

def test_flatten_3():
    run_test('flatten([1, [2], [3, 4], [5, [6, 7]]])', '[1, 2, 3, 4, 5, [6, 7]]')

def test_floor_1():
    run_test('floor(1.3)', '1.0')

def test_format_date_1():
    run_test("format_date(date('20170102'))", "'2017-01-02 00:00:00'")

def test_format_date_2():
    run_test('format_date(NULL)', 'NULL')

def test_format_date_3():
    run_test("format_date(date('2017010212'), fmt = 'HH')", "'12'")

def test_gcd_1():
    run_test('gcd(2 * 3, 2 * 2)', '2')

def test_gcd_2():
    run_test('gcd(2 * 2  * 3 * 5, 2  * 3 * 5)', '30')

def test_gcd_3():
    run_test('reduce([2 * 2 * 3 * 5, 2 * 3 * 3, 2 * 3 * 5 * 7], gcd)', '6')

def test_geometric_mean_1():
    run_test('round(geometric_mean([54, 24, 36]), 1)', '36.0')

def test_get_output_string_1():
    run_test("do def o = str_output(); print('abc', out = o); get_output_string(o); end", "'abc'")

def test_greater_1():
    run_test('greater(1, 2)', 'FALSE')

def test_greater_2():
    run_test('greater(1, 1)', 'FALSE')

def test_greater_3():
    run_test('greater(2, 1)', 'TRUE')

def test_greater_equals_1():
    run_test('greater_equals(1, 2)', 'FALSE')

def test_greater_equals_2():
    run_test('greater_equals(1, 1)', 'TRUE')

def test_greater_equals_3():
    run_test('greater_equals(2, 1)', 'TRUE')

def test_grep_1():
    run_test("grep(['one', 'two', 'three'], //e//)", "['one', 'three']")

def test_grep_2():
    run_test("grep(['one', 'two', 'three'], //^one$//)", "['one']")

def test_grep_3():
    run_test("grep(['1:2', '12:2', '123:3'], //2//, key = fn(x) split(x, ':')[1])", "['1:2', '12:2']")

def test_grouped_1():
    run_test('[1, 1, 2, 2, 2, 3, 4, 5, 2] !> grouped()', '[[1, 1], [2, 2, 2], [3], [4], [5], [2]]')

def test_grouped_2():
    run_test('[1, 1, 2, 2, 2] !> grouped()', '[[1, 1], [2, 2, 2]]')

def test_grouped_3():
    run_test('[1, 1] !> grouped()', '[[1, 1]]')

def test_grouped_4():
    run_test('[1] !> grouped()', '[[1]]')

def test_grouped_5():
    run_test('[] !> grouped()', '[]')

def test_grouped_6():
    run_test("[[1, 'a'], [1, 'b'], [2, 'c']] !> grouped(key = fn(x) x[0])", "[[[1, 'a'], [1, 'b']], [[2, 'c']]]")

def test_harmonic_mean_1():
    run_test('round(harmonic_mean([40, 60]), 1)', '48.0')

def test_harmonic_mean_2():
    run_test('round(harmonic_mean([2.5, 3, 10]), 1)', '3.6')

def test_identity_1():
    run_test('identity(1)', '1')

def test_identity_2():
    run_test("identity('a')", "'a'")

def test_if_empty_1():
    run_test('if_empty(1, 2)', '1')

def test_if_empty_2():
    run_test("if_empty('', 2)", '2')

def test_if_null_1():
    run_test('if_null(1, 2)', '1')

def test_if_null_2():
    run_test('if_null(NULL, 2)', '2')

def test_if_null_or_empty_1():
    run_test('if_null_or_empty(1, 2)', '1')

def test_if_null_or_empty_2():
    run_test('if_null_or_empty(NULL, 2)', '2')

def test_if_null_or_empty_3():
    run_test("if_null_or_empty('', 2)", '2')

def test_insert_at_1():
    run_test('insert_at([1, 2, 3], 0, 9)', '[9, 1, 2, 3]')

def test_insert_at_2():
    run_test('insert_at([1, 2, 3], 2, 9)', '[1, 2, 9, 3]')

def test_insert_at_3():
    run_test('insert_at([1, 2, 3], 3, 9)', '[1, 2, 3, 9]')

def test_insert_at_4():
    run_test('insert_at([1, 2, 3], -1, 9)', '[1, 2, 3, 9]')

def test_insert_at_5():
    run_test('insert_at([1, 2, 3], -2, 9)', '[1, 2, 9, 3]')

def test_insert_at_6():
    run_test('insert_at([1, 2, 3], 4, 9)', '[1, 2, 3]')

def test_int_1():
    run_test("int('1')", '1')

def test_intersection_1():
    run_test('intersection(<<1, 2, 3>>, <<2, 3, 4>>)', '<<2, 3>>')

def test_intersection_2():
    run_test('intersection([1, 2, 3], [2, 3, 4])', '<<2, 3>>')

def test_intersection_3():
    run_test('intersection(<<1, 2>>, <<3, 4>>)', '<<>>')

def test_intersection_4():
    run_test('intersection(<<1, 2>>, <<>>)', '<<>>')

def test_interval_1():
    run_test('interval(1, 10)', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]')

def test_interval_2():
    run_test('interval(1, 1)', '[1]')

def test_interval_3():
    run_test('interval(10)', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]')

def test_is_alphanumerical_1():
    run_test("is_alphanumerical('Ab12')", 'TRUE')

def test_is_boolean_1():
    run_test('is_boolean(1 == 2)', 'TRUE')

def test_is_decimal_1():
    run_test('is_decimal(123.45)', 'TRUE')

def test_is_empty_1():
    run_test('is_empty(NULL)', 'TRUE')

def test_is_empty_2():
    run_test('is_empty(1)', 'FALSE')

def test_is_empty_3():
    run_test('is_empty([])', 'TRUE')

def test_is_empty_4():
    run_test('is_empty(<<>>)', 'TRUE')

def test_is_empty_5():
    run_test('is_empty(set([1, 2]))', 'FALSE')

def test_is_empty_6():
    run_test("is_empty('')", 'TRUE')

def test_is_even_1():
    run_test('is_even(2)', 'TRUE')

def test_is_even_2():
    run_test('is_even(3)', 'FALSE')

def test_is_func_1():
    run_test('is_func(fn(x) 2 * x)', 'TRUE')

def test_is_func_2():
    run_test('is_func(sum)', 'TRUE')

def test_is_int_1():
    run_test('is_int(123)', 'TRUE')

def test_is_list_1():
    run_test('is_list([1, 2, 3])', 'TRUE')

def test_is_map_1():
    run_test("is_map(map([['a', 1], ['b', 2]]))", 'TRUE')

def test_is_negative_1():
    run_test('is_negative(-1)', 'TRUE')

def test_is_not_empty_1():
    run_test('is_not_empty([])', 'FALSE')

def test_is_not_empty_2():
    run_test('is_not_empty(set([1, 2]))', 'TRUE')

def test_is_not_empty_3():
    run_test("is_not_empty('a')", 'TRUE')

def test_is_not_null_1():
    run_test("is_not_null('')", 'TRUE')

def test_is_not_null_2():
    run_test('is_not_null(1)', 'TRUE')

def test_is_not_null_3():
    run_test('is_not_null(NULL)', 'FALSE')

def test_is_null_1():
    run_test("is_null('')", 'FALSE')

def test_is_null_2():
    run_test('is_null(1)', 'FALSE')

def test_is_null_3():
    run_test('is_null(NULL)', 'TRUE')

def test_is_numeric_1():
    run_test('is_numeric(123)', 'TRUE')

def test_is_numeric_2():
    run_test('is_numeric(123.45)', 'TRUE')

def test_is_numerical_1():
    run_test("is_numerical('123')", 'TRUE')

def test_is_numerical_2():
    run_test("is_numerical('12b')", 'FALSE')

def test_is_numerical_3():
    run_test("is_numerical('')", 'FALSE')

def test_is_object_1():
    run_test('is_object(object())', 'TRUE')

def test_is_object_2():
    run_test('is_object(map())', 'FALSE')

def test_is_odd_1():
    run_test('is_odd(2)', 'FALSE')

def test_is_odd_2():
    run_test('is_odd(3)', 'TRUE')

def test_is_positive_1():
    run_test('is_positive(1)', 'TRUE')

def test_is_set_1():
    run_test('is_set(set([1, 2, 3]))', 'TRUE')

def test_is_string_1():
    run_test("is_string('abc')", 'TRUE')

def test_is_valid_date_1():
    run_test("is_valid_date('20170304')", 'TRUE')

def test_is_valid_date_2():
    run_test("is_valid_date('2017030412')", 'FALSE')

def test_is_valid_date_3():
    run_test("is_valid_date('20170399')", 'FALSE')

def test_is_valid_time_1():
    run_test("is_valid_time('1245')", 'TRUE')

def test_is_zero_1():
    run_test('is_zero(0)', 'TRUE')

def test_iso_date_1():
    run_test("iso_date(date('20200203'))", "'2020-02-03'")

def test_iso_datetime_1():
    run_test("iso_datetime(date('20200203201544'))", "'2020-02-03T20:15:44'")

def test_join_1():
    run_test("join([1, 2, 3], '|')", "'1|2|3'")

def test_join_2():
    run_test("join(['one', 'world'], '--')", "'one--world'")

def test_join_3():
    run_test("join([], '|')", "''")

def test_join_4():
    run_test("join([1], '|')", "'1'")

def test_join_5():
    run_test("join('|', [1, 2, 3])", "'1|2|3'")

def test_label_data_1():
    run_test("label_data(['a', 'b', 'c'], [1, 2, 3])", "<<<'a' => 1, 'b' => 2, 'c' => 3>>>")

def test_last_1():
    run_test('last([1, 2, 3])', '3')

def test_last_2():
    run_test('last(NULL)', 'NULL')

def test_last_n_1():
    run_test('range(100) !> last_n(5)', '[95, 96, 97, 98, 99]')

def test_lcm_1():
    run_test('lcm(2 * 2 * 2 * 3, 2 * 2 * 3 * 3)', '72')

def test_length_1():
    run_test("length('123')", '3')

def test_length_2():
    run_test('length([1, 2, 3])', '3')

def test_length_3():
    run_test('length(<<1, 2, 3>>)', '3')

def test_length_4():
    run_test("<<<'a' => 1, 'b' => 2, 'c' =>3>>> !> length()", '3')

def test_length_5():
    run_test('length(object())', '0')

def test_less_1():
    run_test('less(1, 2)', 'TRUE')

def test_less_equals_1():
    run_test('less_equals(1, 2)', 'TRUE')

def test_less_equals_2():
    run_test('less_equals(2, 1)', 'FALSE')

def test_less_equals_3():
    run_test('less_equals(1, 1)', 'TRUE')

def test_lines_1():
    run_test("lines('a\\nb c\\r\\nd')", "['a', 'b c', 'd']")

def test_list_1():
    run_test('list(1)', '[1]')

def test_log_1():
    run_test('int(log(E))', '1')

def test_log10_1():
    run_test('int(log10(1000))', '3')

def test_log2_1():
    run_test('int(log2(1024))', '10')

def test_lower_1():
    run_test("lower('Hello')", "'hello'")

def test_map_1():
    run_test('map([[1, 2], [3, 4]])', '<<<1 => 2, 3 => 4>>>')

def test_map_2():
    run_test('map()', '<<<>>>')

def test_map_get_1():
    run_test("map_get(<<<a => 1, b => 2>>>, 'a')", '1')

def test_map_get_2():
    run_test("map_get(<<<a => 1, b => 2>>>, 'b')", '2')

def test_map_get_3():
    run_test("map_get(<<<a => 1, b => 2>>>, 'c')", 'NULL')

def test_map_get_4():
    run_test("map_get(<<<a => 1, b => 2>>>, 'c', default_value = 9)", '9')

def test_map_get_pattern_1():
    run_test("map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'a')", '1')

def test_map_get_pattern_2():
    run_test("map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'b')", '1')

def test_map_get_pattern_3():
    run_test("map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'c')", '2')

def test_map_get_pattern_4():
    run_test("map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'd')", '2')

def test_map_get_pattern_5():
    run_test("map_get_pattern(<<<//[ab]// => 1, //[cd]// => 2>>>, 'e')", 'NULL')

def test_map_list_1():
    run_test('map_list([1, 2, 3], fn(x) 2 * x)', '[2, 4, 6]')

def test_map_list_2():
    run_test("['one', 'two', 'three'] !> map_list(fn(x) '*' + x + '*')", "['*one*', '*two*', '*three*']")

def test_map_list_3():
    run_test('map_list(identity, [1, 2, 3])', '[1, 2, 3]')

def test_matches_1():
    run_test("matches('abc12', //[a-c]+[1-9]+//)", 'TRUE')

def test_matches_2():
    run_test('matches(NULL, //[a-c]+[1-9]+//)', 'FALSE')

def test_max_1():
    run_test('max(1, 2)', '2')

def test_max_2():
    run_test("max([1, 'z'], [2, 'a'], key = fn(x) x[1])", "[1, 'z']")

def test_max_3():
    run_test('max([1, 3, 2, 4, 2])', '4')

def test_mean_1():
    run_test('mean([1, 2, 3, 4, 4])', '2.8')

def test_mean_2():
    run_test('mean([-1.0, 2.5, 3.25, 5.75])', '2.625')

def test_median_1():
    run_test('median([1, 3, 5])', '3')

def test_median_2():
    run_test('median([1, 3, 5, 7])', '4.0')

def test_median_high_1():
    run_test('median_high([1, 3, 5])', '3')

def test_median_high_2():
    run_test('median_high([1, 3, 5, 7])', '5')

def test_median_low_1():
    run_test('median_low([1, 3, 5])', '3')

def test_median_low_2():
    run_test('median_low([1, 3, 5, 7])', '3')

def test_min_1():
    run_test('min(1, 2)', '1')

def test_min_2():
    run_test("min([1, 'z'], [2, 'a'], key = fn(x) x[1])", "[2, 'a']")

def test_min_3():
    run_test('min([1, 3, 2, 4, 2])', '1')

def test_mod_1():
    run_test('mod(7, 2)', '1')

def test_mul_1():
    run_test('mul(2, 3)', '6')

def test_mul_2():
    run_test("mul('2', 3)", "'222'")

def test_mul_3():
    run_test('mul([1, 2], 3)', '[1, 2, 1, 2, 1, 2]')

def test_non_empty_1():
    run_test("non_empty('a', 'b')", "'a'")

def test_non_empty_2():
    run_test("non_empty('', 'b')", "'b'")

def test_non_zero_1():
    run_test('non_zero(1, 2)', '1')

def test_non_zero_2():
    run_test('non_zero(0, 2)', '2')

def test_not_equals_1():
    run_test('not_equals(1, 2)', 'TRUE')

def test_not_equals_2():
    run_test('not_equals(1, 1)', 'FALSE')

def test_not_equals_3():
    run_test('not_equals(1, 1.0)', 'FALSE')

def test_not_equals_4():
    run_test("not_equals('a', 'b')", 'TRUE')

def test_object_1():
    run_test('object()', '<**>')

def test_object_2():
    run_test('object(<<<a => 1>>>)', '<*a=1*>')

def test_object_3():
    run_test("object([['a', 1]])", '<*a=1*>')

def test_ord_1():
    run_test("ord('a')", '97')

def test_ord_2():
    run_test("ord(' ')", '32')

def test_pairs_1():
    run_test('pairs([1, 2, 3])', '[[1, 2], [2, 3]]')

def test_pairs_2():
    run_test('pairs([1, 2, 3, 4])', '[[1, 2], [2, 3], [3, 4]]')

def test_parse_1():
    run_test("parse('2+3')", "'(add 2, 3)'")

def test_parse_date_1():
    run_test("parse_date('20170102')", "'20170102000000'")

def test_parse_date_2():
    run_test("parse_date('20170102', fmt = 'yyyyMMdd')", "'20170102000000'")

def test_parse_date_3():
    run_test("parse_date('2017010222', fmt = 'yyyyMMdd')", 'NULL')

def test_parse_date_4():
    run_test("parse_date('20170102', fmt = 'yyyyMMddHH')", 'NULL')

def test_parse_date_5():
    run_test("parse_date('20170102', fmt = ['yyyyMMdd'])", "'20170102000000'")

def test_parse_date_6():
    run_test("parse_date('201701022015', fmt = ['yyyyMMddHHmm', 'yyyyMMddHH', 'yyyyMMdd'])", "'20170102201500'")

def test_parse_date_7():
    run_test("parse_date('20170112', fmt = ['yyyyMM', 'yyyy'])", 'NULL')

def test_parse_date_8():
    run_test("parse_date('20170144')", 'NULL')

def test_parse_json_1():
    run_test('parse_json(\'{"a": 12, "b": [1, 2, 3, 4]}\')', "'<<<\\'a\\' => 12, \\'b\\' => [1, 2, 3, 4]>>>'")

def test_parse_json_2():
    run_test("parse_json('[1, 2.5, 3, 4]')", "'[1, 2.5, 3, 4]'")

def test_pattern_1():
    run_test("pattern('xy[1-9]{3}')", '//xy[1-9]{3}//')

def test_permutations_1():
    run_test('permutations([1, 2, 3])', '[[1, 2, 3], [2, 1, 3], [3, 1, 2], [1, 3, 2], [2, 3, 1], [3, 2, 1]]')

def test_pow_1():
    run_test('pow(2, 3)', '8')

def test_pow_2():
    run_test('pow(2.5, 2)', '6.25')

def test_pow_3():
    run_test('pow(4, 2)', '16')

def test_pow_4():
    run_test('pow(4.0, 2.0)', '16.0')

def test_pow_5():
    run_test('round(pow(2, 1.5), digits = 3)', '2.828')

def test_print_1():
    run_test("print('hello')", 'NULL')

def test_println_1():
    run_test("println('hello')", 'NULL')

def test_process_lines_1():
    run_test("def result = []; str_input('one\\ntwo\\nthree') !> process_lines(fn(line) result !> append(line)); result", "['one', 'two', 'three']")

def test_process_lines_2():
    run_test("str_input('one\\ntwo\\nthree') !> process_lines(fn(line) line)", '3')

def test_process_lines_3():
    run_test("def result = ''; process_lines(['a', 'b', 'c'], fn(line) result += line); result", "'abc'")

def test_prod_1():
    run_test('prod([1, 2, 3])', '6')

def test_prod_2():
    run_test('prod(range(1, 10))', '362880')

def test_put_1():
    run_test('def m = map([[1, 2], [3, 4]]); put(m, 1, 9)', '<<<1 => 9, 3 => 4>>>')

def test_q_1():
    run_test('q([1, 2, 3])', "'1|2|3'")

def test_q_2():
    run_test('q([])', "''")

def test_random_1():
    run_test('set_seed(1); random(5)', '1')

def test_range_1():
    run_test('range(4)', '[0, 1, 2, 3]')

def test_range_2():
    run_test('range(3, 6)', '[3, 4, 5]')

def test_range_3():
    run_test('range(10, step = 3)', '[0, 3, 6, 9]')

def test_range_4():
    run_test('range(10, 0, step = -2)', '[10, 8, 6, 4, 2]')

def test_read_1():
    run_test("def s = str_input('hello'); read(s)", "'h'")

def test_read_all_1():
    run_test("def s = str_input('hello'); read_all(s)", "'hello'")

def test_readln_1():
    run_test("def s = str_input('hello'); readln(s)", "'hello'")

def test_reduce_1():
    run_test('reduce([1, 2, 3, 4], add)', '10')

def test_remove_1():
    run_test('remove([1, 2, 3, 4], 3)', '[1, 2, 4]')

def test_remove_2():
    run_test('remove(<<1, 2, 3, 4>>, 3)', '<<1, 2, 4>>')

def test_remove_3():
    run_test("remove(<<<a => 1, b => 2, c => 3, d => 4>>>, 'c')", "<<<'a' => 1, 'b' => 2, 'd' => 4>>>")

def test_remove_4():
    run_test("remove(<*a=1, b=2*>, 'b')", '<*a=1*>')

def test_replace_1():
    run_test("replace('abc', 'b', 'x')", "'axc'")

def test_replace_2():
    run_test("replace('abc', 'b', 'xy')", "'axyc'")

def test_replace_3():
    run_test("replace('abcdef', 'bcd', 'xy')", "'axyef'")

def test_replace_4():
    run_test("replace('abcabcabc', 'abc', 'xy', start = 3)", "'abcxyxy'")

def test_rest_1():
    run_test('rest([1, 2, 3])', '[2, 3]')

def test_reverse_1():
    run_test("reverse('abc')", "'cba'")

def test_reverse_2():
    run_test('reverse(NULL)', 'NULL')

def test_reverse_3():
    run_test('reverse(12)', 'NULL')

def test_reverse_list_1():
    run_test('reverse_list([1, 2, 3])', '[3, 2, 1]')

def test_reverse_list_2():
    run_test('reverse_list(NULL)', 'NULL')

def test_reverse_list_3():
    run_test("reverse_list('abc')", 'NULL')

def test_reverse_string_1():
    run_test("reverse('abc')", "'cba'")

def test_reverse_string_2():
    run_test('reverse(NULL)', 'NULL')

def test_reverse_string_3():
    run_test('reverse(12)', 'NULL')

def test_round_1():
    run_test('round(1.345, digits = 1)', '1.3')

def test_s_1():
    run_test("def name = 'damian'; s('hello {name}')", "'hello damian'")

def test_s_2():
    run_test("def foo = '{bar}'; def bar = 'baz'; s('{foo}{bar}')", "'{bar}baz'")

def test_s_3():
    run_test('def a = \'abc\'; s(\'"{a#-8}"\')', '\'"abc     "\'')

def test_s_4():
    run_test('def a = \'abc\'; s(\'"{a#8}"\')', '\'"     abc"\'')

def test_s_5():
    run_test("def a = 'abc'; s('a = {a#5}')", "'a =   abc'")

def test_s_6():
    run_test("def a = 'abc'; s('a = {a#-5}')", "'a = abc  '")

def test_s_7():
    run_test("def n = 12; s('n = {n#5}')", "'n =    12'")

def test_s_8():
    run_test("def n = 12; s('n = {n#-5}')", "'n = 12   '")

def test_s_9():
    run_test("def n = 12; s('n = {n#05}')", "'n = 00012'")

def test_s_10():
    run_test("def n = 1.2345678; s('n = {n#.2}')", "'n = 1.23'")

def test_s_11():
    run_test("def n = 1.2345678; s('n = {n#06.2}')", "'n = 001.23'")

def test_s_12():
    run_test("s('2x3 = {2*3}')", "'2x3 = 6'")

def test_s_13():
    run_test("def n = 123; s('n = {n#x}')", "'n = 7b'")

def test_s_14():
    run_test("def n = 255; s('n = {n#04x}')", "'n = 00ff'")

def test_s_15():
    run_test("require Math; s('{Math->PI} is cool')", "'3.141592653589793 is cool'")

def test_sample_1():
    run_test('sample([1, 2, 3], 3)', '<<1, 2, 3>>')

def test_sample_2():
    run_test('sample([1, 1, 1, 2, 2, 3], 3)', '<<1, 2, 3>>')

def test_sample_3():
    run_test("sample('abc', 3)", "<<'a', 'b', 'c'>>")

def test_set_1():
    run_test('set([1, 2, 3])', '<<1, 2, 3>>')

def test_set_seed_1():
    run_test('set_seed(1)', '1')

def test_sign_1():
    run_test('sign(2)', '1')

def test_sign_2():
    run_test('sign(-3)', '-1')

def test_sin_1():
    run_test('sin(0)', '0.0')

def test_sorted_1():
    run_test('sorted([3, 2, 1])', '[1, 2, 3]')

def test_sorted_2():
    run_test('sorted([6, 2, 5, 3, 1, 4])', '[1, 2, 3, 4, 5, 6]')

def test_split_1():
    run_test("split('a,b,c', //,//)", "['a', 'b', 'c']")

def test_split2_1():
    run_test("split2('a:b:c|d:e:f', escape_pattern('|'), escape_pattern(':'))", "[['a', 'b', 'c'], ['d', 'e', 'f']]")

def test_split2_2():
    run_test("split2('', '\\|', ':')", '[]')

def test_sprintf_1():
    run_test("sprintf('{0} {1}', 1, 2)", "'1 2'")

def test_sprintf_2():
    run_test("sprintf('{0} {1}', 'a', 'b')", "'a b'")

def test_sprintf_3():
    run_test("sprintf('{0#5} {1#5}', 1, 2)", "'    1     2'")

def test_sprintf_4():
    run_test("sprintf('{0#-5} {1#-5}', 1, 2)", "'1     2    '")

def test_sprintf_5():
    run_test("sprintf('{0#05} {1#05}', 1, 2)", "'00001 00002'")

def test_sprintf_6():
    run_test("require Math; sprintf('{0#.4}', Math->PI)", "'3.1416'")

def test_sqrt_1():
    run_test('sqrt(4)', '2.0')

def test_starts_with_1():
    run_test("starts_with('abcdef', 'abc')", 'TRUE')

def test_starts_with_2():
    run_test("starts_with(NULL, 'abc')", 'FALSE')

def test_str_contains_1():
    run_test("contains('abcdef', 'abc')", 'TRUE')

def test_str_contains_2():
    run_test("contains('abcdef', 'cde')", 'TRUE')

def test_str_contains_3():
    run_test("contains('abcdef', 'def')", 'TRUE')

def test_str_contains_4():
    run_test("contains('abcdef', 'efg')", 'FALSE')

def test_str_contains_5():
    run_test("contains(NULL, 'abc')", 'FALSE')

def test_str_contains_6():
    run_test('contains([1, 2, 3], 2)', 'TRUE')

def test_str_contains_7():
    run_test('<<1, 2, 3>> !> contains(3)', 'TRUE')

def test_str_contains_8():
    run_test("<<<a => 1, b => 2>>> !> contains('b')", 'TRUE')

def test_str_ends_with_1():
    run_test("ends_with('abcdef', 'def')", 'TRUE')

def test_str_ends_with_2():
    run_test("ends_with('abcdef', 'abc')", 'FALSE')

def test_str_ends_with_3():
    run_test("ends_with(NULL, 'abc')", 'FALSE')

def test_str_find_1():
    run_test("find('abcdefg', 'cde')", '2')

def test_str_find_2():
    run_test("find('abc|def|ghi', '|', start = 4)", '7')

def test_str_find_3():
    run_test("find('abcxyabc', 'abc', start = 5)", '5')

def test_str_find_4():
    run_test('find([1, 2, 3, 4], 3)', '2')

def test_str_find_5():
    run_test("find(['abc', 'def'], 'e', key = fn(x) x[1])", '1')

def test_str_find_last_1():
    run_test("find_last('abcdefgcdexy', 'cde')", '7')

def test_str_find_last_2():
    run_test("find_last('abc|def|ghi|jkl', '|', start = 10)", '7')

def test_str_find_last_3():
    run_test("find_last('abcxyabc', 'abc', start = 4)", '0')

def test_str_find_last_4():
    run_test('find_last([1, 2, 3, 4, 3], 3)', '4')

def test_str_find_last_5():
    run_test("find_last(['abc', 'def'], 'e', key = fn(x) x[1])", '1')

def test_str_input_1():
    run_test("str_input('abc')", '<!input-stream>')

def test_str_matches_1():
    run_test("matches('abc12', //[a-c]+[1-9]+//)", 'TRUE')

def test_str_matches_2():
    run_test('matches(NULL, //[a-c]+[1-9]+//)', 'FALSE')

def test_str_output_1():
    run_test("do def o = str_output(); print('abc', out = o); get_output_string(o); end", "'abc'")

def test_str_starts_with_1():
    run_test("starts_with('abcdef', 'abc')", 'TRUE')

def test_str_starts_with_2():
    run_test("starts_with(NULL, 'abc')", 'FALSE')

def test_str_trim_1():
    run_test("trim(' a  ')", "'a'")

def test_string_1():
    run_test('string(123)', "'123'")

def test_strip_extension_1():
    run_test("strip_extension('dir/file.ext')", "'dir/file'")

def test_strip_extension_2():
    run_test("strip_extension('dir/file.a.b.c')", "'dir/file.a.b'")

def test_strip_extension_3():
    run_test("strip_extension('dir/file')", "'dir/file'")

def test_strip_extension_4():
    run_test("strip_extension('dir/.file')", "'dir/.file'")

def test_strip_extension_5():
    run_test("strip_extension('dir/.file.cfg')", "'dir/.file'")

def test_sub_1():
    run_test('sub(1, 2)', '-1')

def test_sub_2():
    run_test('sub([1, 2, 3], 2)', '[1, 3]')

def test_sub_3():
    run_test("sub(date('20170405'), date('20170402'))", '3')

def test_sub_4():
    run_test("sub(date('20170405'), 3)", "'20170402000000'")

def test_sub_5():
    run_test('sub(<<3, 1, 2>>, 2)', '<<1, 3>>')

def test_sublist_1():
    run_test('sublist([1, 2, 3, 4], 2)', '[3, 4]')

def test_substitute_1():
    run_test("substitute('abcd', 2, 'x')", "'abxd'")

def test_substitute_2():
    run_test("substitute([1, 2, 3, 4], 2, 'x')", "[1, 2, 'x', 4]")

def test_substr_1():
    run_test("substr('abcd', 2)", "'cd'")

def test_sum_1():
    run_test('sum([1, 2, 3])', '6')

def test_sum_2():
    run_test('sum([1, 2.5, 3])', '6.5')

def test_sum_3():
    run_test('sum([1, 2.5, 1.5, 3])', '8.0')

def test_sum_4():
    run_test('sum([1.0, 2.0, 3.0])', '6.0')

def test_sum_5():
    run_test('sum([1.0, 2, -3.0])', '0.0')

def test_sum_6():
    run_test('sum([1, 2, -3])', '0')

def test_sum_7():
    run_test("sum([1, '1', 1], ignore = ['1'])", '2')

def test_sum_8():
    run_test('sum(range(101))', '5050')

def test_sum_9():
    run_test('sum([])', '0')

def test_sum_10():
    run_test('sum([NULL], ignore = [NULL])', '0')

def test_sum_11():
    run_test('sum([1, NULL, 3], ignore = [NULL])', '4')

def test_sum_12():
    run_test("sum([1, NULL, '', 3], ignore = [NULL, ''])", '4')

def test_symmetric_diff_1():
    run_test('symmetric_diff(<<1, 2, 3, 4>>, <<3, 4, 5, 6>>)', '<<1, 2, 5, 6>>')

def test_tan_1():
    run_test('tan(0)', '0')

def test_trim_1():
    run_test("trim(' a  ')", "'a'")

def test_type_1():
    run_test("type('Hello')", "'string'")

def test_union_1():
    run_test('union(<<1, 2, 3>>, <<2, 3, 4>>)', '<<1, 2, 3, 4>>')

def test_union_2():
    run_test('union([1, 2, 3], [2, 3, 4])', '<<1, 2, 3, 4>>')

def test_union_3():
    run_test('union(<<1, 2>>, <<3, 4>>)', '<<1, 2, 3, 4>>')

def test_union_4():
    run_test('union(<<1, 2>>, <<>>)', '<<1, 2>>')

def test_unique_1():
    run_test('unique([1, 4, 2, 3, 3, 4, 5])', '[1, 4, 2, 3, 5]')

def test_unique_2():
    run_test("['a1', 'b2', 'c2', 'd3'] !> unique(key = fn(x) x[1])", "['a1', 'b2', 'd3']")

def test_unlines_1():
    run_test("unlines(['a', 'b', 'c'])", "'a\\nb\\nc'")

def test_unwords_1():
    run_test("unwords(['a', 'b', 'c'])", "'a b c'")

def test_upper_1():
    run_test("upper('Hello')", "'HELLO'")

def test_words_1():
    run_test("words('one  two\\tthree four')", "['one', 'two', 'three', 'four']")

def test_zip_1():
    run_test('zip([1, 2, 3], [4, 5, 6, 7])', '[[1, 4], [2, 5], [3, 6]]')

def test_zip_map_1():
    run_test("zip_map(['a', 'b', 'c'], [1, 2, 3])", "<<<'a' => 1, 'b' => 2, 'c' => 3>>>")
